
import React from 'react';

interface TranscriptPreviewModalProps {
  transcript: string;
  onConfirm: (transcript: string) => void;
  onCancel: () => void;
}

export const TranscriptPreviewModal: React.FC<TranscriptPreviewModalProps> = ({ transcript, onConfirm, onCancel }) => {
  return (
    <div 
      className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4"
      aria-modal="true"
      role="dialog"
    >
      <div className="bg-slate-800 border border-slate-700 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] flex flex-col">
        <div className="p-4 border-b border-slate-700 flex-shrink-0">
          <h2 className="text-lg font-semibold text-slate-100">Transcript Preview</h2>
          <p className="text-sm text-slate-400">
            Review the generated transcript below. In a real application, this would be generated by a Speech-to-Text API.
          </p>
        </div>
        <div className="p-4 flex-grow overflow-y-auto">
          <pre className="text-sm bg-slate-900/50 p-3 rounded-md whitespace-pre-wrap font-sans text-slate-300">
            {transcript}
          </pre>
        </div>
        <div className="p-4 bg-slate-800/50 border-t border-slate-700 flex-shrink-0 flex justify-end gap-4">
          <button
            onClick={onCancel}
            className="px-4 py-2 border border-slate-600 text-sm font-medium rounded-md text-slate-300 hover:bg-slate-700 transition-colors duration-200"
          >
            Cancel
          </button>
          <button
            onClick={() => onConfirm(transcript)}
            className="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 transition-colors duration-200"
          >
            Use this Transcript
          </button>
        </div>
      </div>
    </div>
  );
};
